name: Terraform

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - task_3

env:
  TF_VAR_region: ${{ secrets.AWS_REGION }}
  TF_VAR_ssh_pk: ${{ secrets.BASTION_SSH_PK }}
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  GHA_ROLE: ${{ secrets.GHA_ROLE }}
  REGION: ${{ secrets.AWS_REGION }}
  TERRAFORM_VERSION: ${{ secrets.TERRAFORM_VERSION }}

permissions:
  id-token: write
  contents: read

jobs:
  terraform_check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.REGION  }}
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/${{ env.GHA_ROLE }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }} # Add version flexibility
      
      - name: Terraform init # S3 backend init     
        run: terraform init

      - name: Create terraform cache
        uses: actions/cache/save@v4
        with:
          path: .terraform*
          key: terraform-cache-${{ runner.os }}-${{ github.run_id }}

      - name: Terraform Check
        run: terraform fmt -check

  terraform_plan:
    runs-on: ubuntu-latest
    needs: terraform_check
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.REGION  }}
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/${{ env.GHA_ROLE }}

      - name: Restore terraform cache
        uses: actions/cache/restore@v4
        with:
          path: .terraform*
          key: terraform-cache-${{ runner.os }}-${{ github.run_id }}
          fail-on-cache-miss: true

      - name: Terraform Plan
        run: terraform plan -input=false

  terraform_apply:
    runs-on: ubuntu-latest
    needs: terraform_plan
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.REGION  }}
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/${{ env.GHA_ROLE }}

      - name: Restore terraform cache
        uses: actions/cache/restore@v4
        with:
          path: .terraform*
          key: terraform-cache-${{ runner.os }}-${{ github.run_id }}
          fail-on-cache-miss: true

      - name: Terraform Apply
        run: terraform apply -auto-approve


        # name: Terraform Deployment

# on:
#   push:
#     branches:
#       - task-2

# permissions:
#   id-token: write 
#   contents: read 

# env:
#   TF_LOG: INFO
#   AWS_REGION: ${{ secrets.AWS_REGION }}

# jobs:
#   terraform-deploy:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Print debug info
#         run: |
#           echo "AWS_REGION: ${{ secrets.AWS_REGION }}"
#           echo "AWS_ROLE_ARN: ${{ secrets.AWS_ROLE_ARN }}"

#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v1
#         with:
#           role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
#           aws-region: ${{ secrets.AWS_REGION }}
#           role-session-name: GitHub-OIDC-TERRAFORM

#       - name: Set up Terraform
#         uses: hashicorp/setup-terraform@v2
#         with:
#           terraform_version: 1.9.6  

#       - name: Create and restore Terraform cache
#         uses: actions/cache@v2
#         with:
#           path: .terraform*
#           key: terraform-cache-${{ runner.os }}-${{ github.run_id }}
#           restore-keys: |
#             terraform-cache-${{ runner.os }}-

#       - name: Terraform Format Check
#         run: terraform fmt -check

#       - name: Terraform Init
#         run: terraform init

#       - name: Terraform Plan
#         run: terraform plan -input=false

#       - name: Terraform Apply
#         run: terraform apply -auto-approve